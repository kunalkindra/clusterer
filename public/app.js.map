{"version":3,"sources":["app/constants.js","app/initialize.js","app/map.js"],"names":["CLUSTER_WORKER_OPS","init","getClusters","getClusterExpansionZoom","CLUSTER_WORKER_EVENTS","updatePoints","expandAndZoom","document","addEventListener","Map","radius","maxZoom","containerId","dataUrl","clusteringOptions","map","getMap","worker","Worker","dataSource","attachWorkerListeners","getClustersFromWorker","bind","fetch","then","response","json","data","on","loadMap","initClusterer","features","mapboxgl","container","getElementById","style","version","zoom","center","sources","type","tiles","tileSize","glyphs","layers","id","source","minzoom","maxzoom","points","postMessage","options","bounds","getBounds","getZoom","getWest","getSouth","getEast","getNorth","onmessage","updateDataOnMap","allPoints","flyTo","clusterLayerId","clusterCountLayerId","pointLayerId","clusterFilter","pointFilter","textFont","textFontSize","setStyleToCursor","getCanvas","cursor","removeCursorStyle","addSource","addLayer","filter","paint","layout","e","cluster","queryRenderedFeatures","point","clusterId","properties","cluster_id","geometry","coordinates","feature","event","pointInfo","Popup","setLngLat","setHTML","addTo","getSource","setData"],"mappings":"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","file":"public/app.js","sourcesContent":["export const CLUSTER_WORKER_OPS = {\n    init: 'init',\n    getClusters: 'getClusters',\n    getClusterExpansionZoom: 'getClusterExpansionZoom'\n};\n\nexport const CLUSTER_WORKER_EVENTS = {\n    updatePoints: 'updatePoints',\n    expandAndZoom: 'expandAndZoom'\n};\n","import Map from './map';\n\ndocument.addEventListener('DOMContentLoaded', () => {\n    new Map('container', 'data/places.json', {\n        radius: 40,\n        maxZoom: 20\n    });\n});\n","import {CLUSTER_WORKER_EVENTS, CLUSTER_WORKER_OPS} from \"./constants\";\nimport mapboxgl from 'mapbox-gl';\n\nexport default class Map {\n    constructor(containerId, dataUrl, clusteringOptions) {\n        this.map = this.getMap(containerId);\n        this.worker = new Worker('worker/clusterWorker.js');\n        this.dataSource = 'dataSource';\n        this.attachWorkerListeners();\n\n        this.getClustersFromWorker = this.getClustersFromWorker.bind(this);\n\n        fetch(dataUrl)\n            .then(response => response.json())\n            .then((data) => this.map.on('load', () => {\n                this.loadMap();\n                this.initClusterer(data.features, clusteringOptions)\n            }))\n    }\n\n    getMap(containerId) {\n        return new mapboxgl.Map({\n            container: document.getElementById(containerId),\n            style: {\n                version: 8,\n                zoom: 9, // default zoom.\n                center: [0, 51.5], // default center coordinate in [longitude, latitude] format.\n                sources: {\n                    // Using an open-source map tile layer.\n                    \"simple-tiles\": {\n                        type: \"raster\",\n                        tiles: [\n                            \"https://a.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n                            \"https://b.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n                        ],\n                        tileSize: 256\n                    }\n                },\n                glyphs: 'http://glfonts.lukasmartinelli.ch/fonts/{fontstack}/{range}.pbf',\n                layers: [\n                    {\n                        id: \"simple-tiles\",\n                        type: \"raster\",\n                        source: \"simple-tiles\",\n                        minzoom: 0,\n                        maxzoom: 22\n                    }\n                ]\n            }\n        });\n    }\n\n    initClusterer(points, clusteringOptions) {\n        this.worker.postMessage({\n            type: CLUSTER_WORKER_OPS.init,\n            options: clusteringOptions,\n            points,\n            bounds: this.getBounds(),\n            zoom: this.map.getZoom()\n        })\n    }\n\n    getClustersFromWorker() {\n        this.worker.postMessage({\n            type: CLUSTER_WORKER_OPS.getClusters,\n            bounds: this.getBounds(),\n            zoom: this.map.getZoom()\n        })\n    }\n\n    getBounds() {\n        const bounds = this.map.getBounds();\n        return [bounds.getWest(), bounds.getSouth(), bounds.getEast(), bounds.getNorth()];\n    }\n\n    attachWorkerListeners() {\n        this.worker.onmessage = ({data}) => {\n            if (data.type === CLUSTER_WORKER_EVENTS.updatePoints) {\n                this.updateDataOnMap(data.points, data.allPoints)\n            } else if (data.type === CLUSTER_WORKER_EVENTS.expandAndZoom) {\n                this.flyTo(data.center, data.zoom);\n            }\n        };\n    }\n\n    flyTo(center, zoom) {\n        this.map.flyTo({center, zoom});\n    }\n\n    loadMap() {\n        const {map, dataSource} = this;\n\n        //Layers\n        const clusterLayerId = 'clusters';\n        const clusterCountLayerId = 'cluster-count';\n        const pointLayerId = 'unclustered-point';\n\n        //Point Filters\n        const clusterFilter = ['has', 'point_count'];\n        const pointFilter = ['!has', 'point_count'];\n\n        //Style properties\n        const textFont = ['Open Sans Regular'];\n        const textFontSize = 10;\n\n        //Common Listeners\n        const setStyleToCursor = () => map.getCanvas().style.cursor = 'pointer';\n        const removeCursorStyle = () => map.getCanvas().style.cursor = '';\n\n        //Source\n        map.addSource(dataSource, {\n            type: 'geojson',\n            data: {\n                type: \"FeatureCollection\",\n                features: []\n            }\n        });\n\n        //Layers\n        map.addLayer({\n            id: clusterLayerId,\n            type: 'circle',\n            source: dataSource,\n            filter: clusterFilter,\n            paint: {\n                'circle-color': [\n                    'step',\n                    ['get', 'point_count'],\n                    '#51bbd6',\n                    100,\n                    '#f1f075',\n                    750,\n                    '#f28cb1'\n                ],\n                'circle-radius': [\n                    'step',\n                    ['get', 'point_count'],\n                    15,\n                    100,\n                    20,\n                    750,\n                    25\n                ]\n            }\n        });\n\n        map.addLayer({\n            id: clusterCountLayerId,\n            type: 'symbol',\n            source: dataSource,\n            filter: clusterFilter,\n            layout: {\n                'text-field': '{point_count_abbreviated}',\n                'text-font': textFont,\n                'text-size': textFontSize\n            }\n        });\n\n        map.addLayer({\n            id: pointLayerId,\n            type: 'circle',\n            source: dataSource,\n            filter: pointFilter,\n            paint: {\n                'circle-color': '#f00',\n                'circle-radius': 8,\n                'circle-stroke-width': 1,\n                'circle-stroke-color': '#fff'\n            }\n        });\n\n        //Events\n        map.on('click', clusterLayerId, (e) => {\n            const cluster = map.queryRenderedFeatures(e.point, {layers: [clusterLayerId]})[0];\n            this.worker.postMessage({\n                type: CLUSTER_WORKER_OPS.getClusterExpansionZoom,\n                clusterId: cluster.properties.cluster_id,\n                center: cluster.geometry.coordinates\n            })\n        });\n\n        map.on('click', pointLayerId, event => {\n            let feature = event.features[0],\n                properties = feature.properties,\n                pointInfo = properties.id;\n\n            new mapboxgl.Popup()\n                .setLngLat(feature.geometry.coordinates)\n                .setHTML(`Clicked on point number ${pointInfo}`)\n                .addTo(map);\n        });\n\n        map.on('mouseenter', clusterLayerId, setStyleToCursor);\n        map.on('mouseleave', clusterLayerId, removeCursorStyle);\n        map.on('mouseenter', pointLayerId, setStyleToCursor);\n        map.on('mouseleave', pointLayerId, removeCursorStyle);\n        map.on('moveend', this.getClustersFromWorker);\n    }\n\n    updateDataOnMap(data) {\n        const source = this.map.getSource(this.dataSource);\n\n        if (source) {\n            source.setData({\n                type: \"FeatureCollection\",\n                features: data\n            });\n        }\n    }\n}\n"]}